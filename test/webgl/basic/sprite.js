define(["require", "exports", "../../../src/core/webgl/Shader", "../../../src/core/webgl/ShaderType", "../../../src/core/webgl/ShaderProgram", "../../../src/visual/renderer/element/CanvasWebGL", "../../../src/core/util/Interval", "../../../src/core/util/Time", "../../../src/core/webgl/Geometry", "../../../src/vendor/gl-matrix/gl-matrix", "../../../src/vendor/dat.gui/dat.gui", "../../../src/visual/display/Texture", "../../../src/core/webgl/Buffer"], function (require, exports, Shader_1, ShaderType_1, ShaderProgram_1, CanvasWebGL_1, Interval_1, Time_1, Geometry_1, gl_matrix_1, dat_gui_1, Texture_1, Buffer_1) {
    "use strict";
    var canvas = new CanvasWebGL_1.CanvasWebGL(void 0, 1024, 1024);
    canvas.appendTo(document.body.querySelector('[container="main"]'));
    var gl = canvas.getContext();
    var quad = Geometry_1.Geometry.QUAD;
    var vertex = new Shader_1.Shader(ShaderType_1.default.VERTEX, './sprite/shader.v.glsl');
    var fragment = new Shader_1.Shader(ShaderType_1.default.FRAGMENT, './sprite/shader.v.glsl');
    var program = new ShaderProgram_1.ShaderProgram(gl, vertex, fragment).use();
    var texture = Texture_1.Texture.createFromUrl('../uv.jpg');
    var uvBuffer = new Buffer_1.Buffer(gl, new Float32Array(Texture_1.Texture.getFullUV()));
    var aTexcoord = program.defineAttribute("aTexcoord", 2);
    uvBuffer.bind();
    aTexcoord.point().enable();
    var aVertexPosition = program.defineAttribute("aVertexPosition", 3);
    var quadBuffer = new Buffer_1.Buffer(gl, quad);
    quadBuffer.bind();
    aVertexPosition.point().enable();
    var uTexture = program.getUniform("uTexture");
    var uMVMatrix = program.getUniform("uMVMatrix");
    var uPMatrix = program.getUniform("uPMatrix");
    var uTime = program.getUniform("uTime");
    texture.load().then(function () {
        Texture_1.Texture.getTexture(gl, texture);
        uTexture.setValue(0).activate();
        Texture_1.Texture.bind(gl, texture);
        Texture_1.Texture.update(gl, texture);
    });
    gl.enable(gl.DEPTH_TEST);
    var DEGREE_RAD = Math.PI / 180;
    var mvMatrix = gl_matrix_1.mat4.create();
    var pMatrix = gl_matrix_1.mat4.create();
    var position = gl_matrix_1.vec3.create();
    gl_matrix_1.mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);
    gl_matrix_1.mat4.translate(mvMatrix, mvMatrix, position);
    var pos = { x: 0, y: 0, z: -2 };
    var gui = new dat_gui_1.GUI();
    gui.add(pos, 'x', -50, 50);
    gui.add(pos, 'y', -50, 50);
    gui.add(pos, 'z', -50, 50);
    var interval = new Interval_1.default(10).attach(function (delta) {
        var current = Time_1.default.getSafeFromStart() / 100;
        gl_matrix_1.vec3.set(position, pos.x, pos.y, pos.z);
        gl_matrix_1.mat4.identity(mvMatrix);
        gl_matrix_1.mat4.translate(mvMatrix, mvMatrix, position);
        gl_matrix_1.mat4.rotateX(mvMatrix, mvMatrix, current * DEGREE_RAD);
        gl_matrix_1.mat4.rotateY(mvMatrix, mvMatrix, (current * 10) * DEGREE_RAD);
        gl_matrix_1.mat4.rotateZ(mvMatrix, mvMatrix, (current * 10) * DEGREE_RAD);
        uMVMatrix.value = mvMatrix;
        uPMatrix.value = pMatrix;
        uTime.value = current;
        gl.clearColor(0.0, 0.0, 0.0, 1);
        gl.drawElements(gl.TRIANGLES, quad.length, gl.UNSIGNED_SHORT, 0);
    });
});
